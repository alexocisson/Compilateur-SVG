Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> figure
Rule 6     figure -> FIGURE ( parametre , parametre , parametre , parametre )
Rule 7     figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur )
Rule 8     couleur -> COULEUR
Rule 9     couleur -> [ parametre , parametre , parametre ]
Rule 10    parametre -> NUMBER
Rule 11    parametre -> IDENTIFIER
Rule 12    statement -> PRINT expression
Rule 13    structure -> WHILE expression { programme }
Rule 14    expression -> expression ADD_OP expression
Rule 15    expression -> expression MUL_OP expression
Rule 16    expression -> NUMBER
Rule 17    expression -> IDENTIFIER
Rule 18    expression -> ( expression )
Rule 19    expression -> ADD_OP expression
Rule 20    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 6 7 18
)                    : 6 7 18
,                    : 6 6 6 7 7 7 7 9 9
;                    : 2
=                    : 20
ADD_OP               : 14 19
COULEUR              : 8
FIGURE               : 6 7
IDENTIFIER           : 11 17 20
MUL_OP               : 15
NUMBER               : 10 16
PRINT                : 12
WHILE                : 13
[                    : 9
]                    : 9
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

assignation          : 3
couleur              : 7
expression           : 12 13 14 14 15 15 18 19 20
figure               : 5
parametre            : 6 6 6 6 7 7 7 7 9 9 9
programme            : 2 13 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (12) statement -> . PRINT expression
    (20) assignation -> . IDENTIFIER = expression
    (13) structure -> . WHILE expression { programme }
    (6) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre , couleur )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 10


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> figure .

    ;               reduce using rule 5 (statement -> figure .)
    $end            reduce using rule 5 (statement -> figure .)
    }               reduce using rule 5 (statement -> figure .)


state 6

    (12) statement -> PRINT . expression
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 11

state 7

    (20) assignation -> IDENTIFIER . = expression

    =               shift and go to state 16


state 8

    (13) structure -> WHILE . expression { programme }
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 17

state 9

    (6) figure -> FIGURE . ( parametre , parametre , parametre , parametre )
    (7) figure -> FIGURE . ( parametre , parametre , parametre , parametre , couleur )

    (               shift and go to state 18


state 10

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (12) statement -> . PRINT expression
    (20) assignation -> . IDENTIFIER = expression
    (13) structure -> . WHILE expression { programme }
    (6) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre , couleur )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    statement                      shift and go to state 2
    programme                      shift and go to state 19
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 11

    (12) statement -> PRINT expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    ;               reduce using rule 12 (statement -> PRINT expression .)
    $end            reduce using rule 12 (statement -> PRINT expression .)
    }               reduce using rule 12 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 12

    (19) expression -> ADD_OP . expression
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 22

state 13

    (16) expression -> NUMBER .

    ADD_OP          reduce using rule 16 (expression -> NUMBER .)
    MUL_OP          reduce using rule 16 (expression -> NUMBER .)
    ;               reduce using rule 16 (expression -> NUMBER .)
    $end            reduce using rule 16 (expression -> NUMBER .)
    }               reduce using rule 16 (expression -> NUMBER .)
    {               reduce using rule 16 (expression -> NUMBER .)
    )               reduce using rule 16 (expression -> NUMBER .)


state 14

    (17) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 17 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 17 (expression -> IDENTIFIER .)
    ;               reduce using rule 17 (expression -> IDENTIFIER .)
    $end            reduce using rule 17 (expression -> IDENTIFIER .)
    }               reduce using rule 17 (expression -> IDENTIFIER .)
    {               reduce using rule 17 (expression -> IDENTIFIER .)
    )               reduce using rule 17 (expression -> IDENTIFIER .)


state 15

    (18) expression -> ( . expression )
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 23

state 16

    (20) assignation -> IDENTIFIER = . expression
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 24

state 17

    (13) structure -> WHILE expression . { programme }
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    {               shift and go to state 25
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 18

    (6) figure -> FIGURE ( . parametre , parametre , parametre , parametre )
    (7) figure -> FIGURE ( . parametre , parametre , parametre , parametre , couleur )
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 26

state 19

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 20

    (14) expression -> expression ADD_OP . expression
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 29

state 21

    (15) expression -> expression MUL_OP . expression
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER
    (18) expression -> . ( expression )
    (19) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 30

state 22

    (19) expression -> ADD_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 19 (expression -> ADD_OP expression .)
    ;               reduce using rule 19 (expression -> ADD_OP expression .)
    $end            reduce using rule 19 (expression -> ADD_OP expression .)
    }               reduce using rule 19 (expression -> ADD_OP expression .)
    {               reduce using rule 19 (expression -> ADD_OP expression .)
    )               reduce using rule 19 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 23

    (18) expression -> ( expression . )
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    )               shift and go to state 31
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 24

    (20) assignation -> IDENTIFIER = expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    ;               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 25

    (13) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (12) statement -> . PRINT expression
    (20) assignation -> . IDENTIFIER = expression
    (13) structure -> . WHILE expression { programme }
    (6) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre , couleur )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    programme                      shift and go to state 32
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 26

    (6) figure -> FIGURE ( parametre . , parametre , parametre , parametre )
    (7) figure -> FIGURE ( parametre . , parametre , parametre , parametre , couleur )

    ,               shift and go to state 33


state 27

    (10) parametre -> NUMBER .

    ,               reduce using rule 10 (parametre -> NUMBER .)
    )               reduce using rule 10 (parametre -> NUMBER .)
    ]               reduce using rule 10 (parametre -> NUMBER .)


state 28

    (11) parametre -> IDENTIFIER .

    ,               reduce using rule 11 (parametre -> IDENTIFIER .)
    )               reduce using rule 11 (parametre -> IDENTIFIER .)
    ]               reduce using rule 11 (parametre -> IDENTIFIER .)


state 29

    (14) expression -> expression ADD_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 14 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 14 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 14 (expression -> expression ADD_OP expression .)
    }               reduce using rule 14 (expression -> expression ADD_OP expression .)
    {               reduce using rule 14 (expression -> expression ADD_OP expression .)
    )               reduce using rule 14 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21

  ! MUL_OP          [ reduce using rule 14 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 20 ]


state 30

    (15) expression -> expression MUL_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 15 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 15 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 15 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 15 (expression -> expression MUL_OP expression .)
    }               reduce using rule 15 (expression -> expression MUL_OP expression .)
    {               reduce using rule 15 (expression -> expression MUL_OP expression .)
    )               reduce using rule 15 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 31

    (18) expression -> ( expression ) .

    ADD_OP          reduce using rule 18 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 18 (expression -> ( expression ) .)
    ;               reduce using rule 18 (expression -> ( expression ) .)
    $end            reduce using rule 18 (expression -> ( expression ) .)
    }               reduce using rule 18 (expression -> ( expression ) .)
    {               reduce using rule 18 (expression -> ( expression ) .)
    )               reduce using rule 18 (expression -> ( expression ) .)


state 32

    (13) structure -> WHILE expression { programme . }

    }               shift and go to state 34


state 33

    (6) figure -> FIGURE ( parametre , . parametre , parametre , parametre )
    (7) figure -> FIGURE ( parametre , . parametre , parametre , parametre , couleur )
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 35

state 34

    (13) structure -> WHILE expression { programme } .

    ;               reduce using rule 13 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 13 (structure -> WHILE expression { programme } .)
    }               reduce using rule 13 (structure -> WHILE expression { programme } .)


state 35

    (6) figure -> FIGURE ( parametre , parametre . , parametre , parametre )
    (7) figure -> FIGURE ( parametre , parametre . , parametre , parametre , couleur )

    ,               shift and go to state 36


state 36

    (6) figure -> FIGURE ( parametre , parametre , . parametre , parametre )
    (7) figure -> FIGURE ( parametre , parametre , . parametre , parametre , couleur )
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 37

state 37

    (6) figure -> FIGURE ( parametre , parametre , parametre . , parametre )
    (7) figure -> FIGURE ( parametre , parametre , parametre . , parametre , couleur )

    ,               shift and go to state 38


state 38

    (6) figure -> FIGURE ( parametre , parametre , parametre , . parametre )
    (7) figure -> FIGURE ( parametre , parametre , parametre , . parametre , couleur )
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 39

state 39

    (6) figure -> FIGURE ( parametre , parametre , parametre , parametre . )
    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre . , couleur )

    )               shift and go to state 41
    ,               shift and go to state 40


state 40

    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre , . couleur )
    (8) couleur -> . COULEUR
    (9) couleur -> . [ parametre , parametre , parametre ]

    COULEUR         shift and go to state 43
    [               shift and go to state 44

    couleur                        shift and go to state 42

state 41

    (6) figure -> FIGURE ( parametre , parametre , parametre , parametre ) .

    ;               reduce using rule 6 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)
    $end            reduce using rule 6 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)
    }               reduce using rule 6 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)


state 42

    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur . )

    )               shift and go to state 45


state 43

    (8) couleur -> COULEUR .

    )               reduce using rule 8 (couleur -> COULEUR .)


state 44

    (9) couleur -> [ . parametre , parametre , parametre ]
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 46

state 45

    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur ) .

    ;               reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur ) .)
    $end            reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur ) .)
    }               reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre , couleur ) .)


state 46

    (9) couleur -> [ parametre . , parametre , parametre ]

    ,               shift and go to state 47


state 47

    (9) couleur -> [ parametre , . parametre , parametre ]
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 48

state 48

    (9) couleur -> [ parametre , parametre . , parametre ]

    ,               shift and go to state 49


state 49

    (9) couleur -> [ parametre , parametre , . parametre ]
    (10) parametre -> . NUMBER
    (11) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 28

    parametre                      shift and go to state 50

state 50

    (9) couleur -> [ parametre , parametre , parametre . ]

    ]               shift and go to state 51


state 51

    (9) couleur -> [ parametre , parametre , parametre ] .

    )               reduce using rule 9 (couleur -> [ parametre , parametre , parametre ] .)

