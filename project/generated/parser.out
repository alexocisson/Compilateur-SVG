Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> figure
Rule 6     pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre )
Rule 7     figure -> FIGURE ( parametre , parametre , parametre , parametre )
Rule 8     figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau )
Rule 9     couleur -> COULEUR
Rule 10    couleur -> [ parametre , parametre , parametre ]
Rule 11    parametre -> NUMBER
Rule 12    parametre -> IDENTIFIER
Rule 13    parametreCouleur -> parametre
Rule 14    parametreCouleur -> couleur
Rule 15    parametrePinceau -> parametre
Rule 16    parametrePinceau -> pinceau
Rule 17    statement -> PRINT expression
Rule 18    structure -> WHILE expression { programme }
Rule 19    expression -> expression ADD_OP expression
Rule 20    expression -> expression MUL_OP expression
Rule 21    expression -> NUMBER
Rule 22    expression -> IDENTIFIER
Rule 23    expression -> ( expression )
Rule 24    expression -> ADD_OP expression
Rule 25    assignation -> IDENTIFIER = expression
Rule 26    assignation -> IDENTIFIER = couleur
Rule 27    assignation -> IDENTIFIER = pinceau

Terminals, with rules where they appear

(                    : 6 7 8 23
)                    : 6 7 8 23
,                    : 6 6 7 7 7 8 8 8 8 10 10
;                    : 2
=                    : 25 26 27
ADD_OP               : 19 24
COULEUR              : 9
FIGURE               : 7 8
IDENTIFIER           : 12 22 25 26 27
MUL_OP               : 20
NUMBER               : 11 21
PINCEAU              : 6
PRINT                : 17
WHILE                : 18
[                    : 10
]                    : 10
error                : 
{                    : 18
}                    : 18

Nonterminals, with rules where they appear

assignation          : 3
couleur              : 14 26
expression           : 17 18 19 19 20 20 23 24 25
figure               : 5
parametre            : 6 7 7 7 7 8 8 8 8 10 10 10 13 15
parametreCouleur     : 6 6
parametrePinceau     : 8
pinceau              : 16 27
programme            : 2 18 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (17) statement -> . PRINT expression
    (25) assignation -> . IDENTIFIER = expression
    (26) assignation -> . IDENTIFIER = couleur
    (27) assignation -> . IDENTIFIER = pinceau
    (18) structure -> . WHILE expression { programme }
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (8) figure -> . FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 10


state 3

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 4

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 5

    (5) statement -> figure .

    ;               reduce using rule 5 (statement -> figure .)
    $end            reduce using rule 5 (statement -> figure .)
    }               reduce using rule 5 (statement -> figure .)


state 6

    (17) statement -> PRINT . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 11

state 7

    (25) assignation -> IDENTIFIER . = expression
    (26) assignation -> IDENTIFIER . = couleur
    (27) assignation -> IDENTIFIER . = pinceau

    =               shift and go to state 16


state 8

    (18) structure -> WHILE . expression { programme }
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 17

state 9

    (7) figure -> FIGURE . ( parametre , parametre , parametre , parametre )
    (8) figure -> FIGURE . ( parametre , parametre , parametre , parametre , parametrePinceau )

    (               shift and go to state 18


state 10

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (17) statement -> . PRINT expression
    (25) assignation -> . IDENTIFIER = expression
    (26) assignation -> . IDENTIFIER = couleur
    (27) assignation -> . IDENTIFIER = pinceau
    (18) structure -> . WHILE expression { programme }
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (8) figure -> . FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    statement                      shift and go to state 2
    programme                      shift and go to state 19
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 11

    (17) statement -> PRINT expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ;               reduce using rule 17 (statement -> PRINT expression .)
    $end            reduce using rule 17 (statement -> PRINT expression .)
    }               reduce using rule 17 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 12

    (24) expression -> ADD_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 22

state 13

    (21) expression -> NUMBER .

    ADD_OP          reduce using rule 21 (expression -> NUMBER .)
    MUL_OP          reduce using rule 21 (expression -> NUMBER .)
    ;               reduce using rule 21 (expression -> NUMBER .)
    $end            reduce using rule 21 (expression -> NUMBER .)
    }               reduce using rule 21 (expression -> NUMBER .)
    {               reduce using rule 21 (expression -> NUMBER .)
    )               reduce using rule 21 (expression -> NUMBER .)


state 14

    (22) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 22 (expression -> IDENTIFIER .)
    ;               reduce using rule 22 (expression -> IDENTIFIER .)
    $end            reduce using rule 22 (expression -> IDENTIFIER .)
    }               reduce using rule 22 (expression -> IDENTIFIER .)
    {               reduce using rule 22 (expression -> IDENTIFIER .)
    )               reduce using rule 22 (expression -> IDENTIFIER .)


state 15

    (23) expression -> ( . expression )
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 23

state 16

    (25) assignation -> IDENTIFIER = . expression
    (26) assignation -> IDENTIFIER = . couleur
    (27) assignation -> IDENTIFIER = . pinceau
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression
    (9) couleur -> . COULEUR
    (10) couleur -> . [ parametre , parametre , parametre ]
    (6) pinceau -> . PINCEAU ( parametreCouleur , parametreCouleur , parametre )

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12
    COULEUR         shift and go to state 27
    [               shift and go to state 28
    PINCEAU         shift and go to state 29

    expression                     shift and go to state 24
    couleur                        shift and go to state 25
    pinceau                        shift and go to state 26

state 17

    (18) structure -> WHILE expression . { programme }
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    {               shift and go to state 30
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 18

    (7) figure -> FIGURE ( . parametre , parametre , parametre , parametre )
    (8) figure -> FIGURE ( . parametre , parametre , parametre , parametre , parametrePinceau )
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 31

state 19

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 20

    (19) expression -> expression ADD_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 34

state 21

    (20) expression -> expression MUL_OP . expression
    (19) expression -> . expression ADD_OP expression
    (20) expression -> . expression MUL_OP expression
    (21) expression -> . NUMBER
    (22) expression -> . IDENTIFIER
    (23) expression -> . ( expression )
    (24) expression -> . ADD_OP expression

    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 15
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 35

state 22

    (24) expression -> ADD_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 24 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 24 (expression -> ADD_OP expression .)
    ;               reduce using rule 24 (expression -> ADD_OP expression .)
    $end            reduce using rule 24 (expression -> ADD_OP expression .)
    }               reduce using rule 24 (expression -> ADD_OP expression .)
    {               reduce using rule 24 (expression -> ADD_OP expression .)
    )               reduce using rule 24 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 23

    (23) expression -> ( expression . )
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    )               shift and go to state 36
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 24

    (25) assignation -> IDENTIFIER = expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ;               reduce using rule 25 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 25 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 25 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 20
    MUL_OP          shift and go to state 21


state 25

    (26) assignation -> IDENTIFIER = couleur .

    ;               reduce using rule 26 (assignation -> IDENTIFIER = couleur .)
    $end            reduce using rule 26 (assignation -> IDENTIFIER = couleur .)
    }               reduce using rule 26 (assignation -> IDENTIFIER = couleur .)


state 26

    (27) assignation -> IDENTIFIER = pinceau .

    ;               reduce using rule 27 (assignation -> IDENTIFIER = pinceau .)
    $end            reduce using rule 27 (assignation -> IDENTIFIER = pinceau .)
    }               reduce using rule 27 (assignation -> IDENTIFIER = pinceau .)


state 27

    (9) couleur -> COULEUR .

    ;               reduce using rule 9 (couleur -> COULEUR .)
    $end            reduce using rule 9 (couleur -> COULEUR .)
    }               reduce using rule 9 (couleur -> COULEUR .)
    ,               reduce using rule 9 (couleur -> COULEUR .)


state 28

    (10) couleur -> [ . parametre , parametre , parametre ]
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 37

state 29

    (6) pinceau -> PINCEAU . ( parametreCouleur , parametreCouleur , parametre )

    (               shift and go to state 38


state 30

    (18) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . figure
    (17) statement -> . PRINT expression
    (25) assignation -> . IDENTIFIER = expression
    (26) assignation -> . IDENTIFIER = couleur
    (27) assignation -> . IDENTIFIER = pinceau
    (18) structure -> . WHILE expression { programme }
    (7) figure -> . FIGURE ( parametre , parametre , parametre , parametre )
    (8) figure -> . FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau )

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    WHILE           shift and go to state 8
    FIGURE          shift and go to state 9

    programme                      shift and go to state 39
    statement                      shift and go to state 2
    assignation                    shift and go to state 3
    structure                      shift and go to state 4
    figure                         shift and go to state 5

state 31

    (7) figure -> FIGURE ( parametre . , parametre , parametre , parametre )
    (8) figure -> FIGURE ( parametre . , parametre , parametre , parametre , parametrePinceau )

    ,               shift and go to state 40


state 32

    (11) parametre -> NUMBER .

    ,               reduce using rule 11 (parametre -> NUMBER .)
    ]               reduce using rule 11 (parametre -> NUMBER .)
    )               reduce using rule 11 (parametre -> NUMBER .)


state 33

    (12) parametre -> IDENTIFIER .

    ,               reduce using rule 12 (parametre -> IDENTIFIER .)
    ]               reduce using rule 12 (parametre -> IDENTIFIER .)
    )               reduce using rule 12 (parametre -> IDENTIFIER .)


state 34

    (19) expression -> expression ADD_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 19 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 19 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 19 (expression -> expression ADD_OP expression .)
    }               reduce using rule 19 (expression -> expression ADD_OP expression .)
    {               reduce using rule 19 (expression -> expression ADD_OP expression .)
    )               reduce using rule 19 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21

  ! MUL_OP          [ reduce using rule 19 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 20 ]


state 35

    (20) expression -> expression MUL_OP expression .
    (19) expression -> expression . ADD_OP expression
    (20) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 20 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 20 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 20 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 20 (expression -> expression MUL_OP expression .)
    }               reduce using rule 20 (expression -> expression MUL_OP expression .)
    {               reduce using rule 20 (expression -> expression MUL_OP expression .)
    )               reduce using rule 20 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 20 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 36

    (23) expression -> ( expression ) .

    ADD_OP          reduce using rule 23 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 23 (expression -> ( expression ) .)
    ;               reduce using rule 23 (expression -> ( expression ) .)
    $end            reduce using rule 23 (expression -> ( expression ) .)
    }               reduce using rule 23 (expression -> ( expression ) .)
    {               reduce using rule 23 (expression -> ( expression ) .)
    )               reduce using rule 23 (expression -> ( expression ) .)


state 37

    (10) couleur -> [ parametre . , parametre , parametre ]

    ,               shift and go to state 41


state 38

    (6) pinceau -> PINCEAU ( . parametreCouleur , parametreCouleur , parametre )
    (13) parametreCouleur -> . parametre
    (14) parametreCouleur -> . couleur
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER
    (9) couleur -> . COULEUR
    (10) couleur -> . [ parametre , parametre , parametre ]

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33
    COULEUR         shift and go to state 27
    [               shift and go to state 28

    parametreCouleur               shift and go to state 42
    parametre                      shift and go to state 43
    couleur                        shift and go to state 44

state 39

    (18) structure -> WHILE expression { programme . }

    }               shift and go to state 45


state 40

    (7) figure -> FIGURE ( parametre , . parametre , parametre , parametre )
    (8) figure -> FIGURE ( parametre , . parametre , parametre , parametre , parametrePinceau )
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 46

state 41

    (10) couleur -> [ parametre , . parametre , parametre ]
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 47

state 42

    (6) pinceau -> PINCEAU ( parametreCouleur . , parametreCouleur , parametre )

    ,               shift and go to state 48


state 43

    (13) parametreCouleur -> parametre .

    ,               reduce using rule 13 (parametreCouleur -> parametre .)


state 44

    (14) parametreCouleur -> couleur .

    ,               reduce using rule 14 (parametreCouleur -> couleur .)


state 45

    (18) structure -> WHILE expression { programme } .

    ;               reduce using rule 18 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 18 (structure -> WHILE expression { programme } .)
    }               reduce using rule 18 (structure -> WHILE expression { programme } .)


state 46

    (7) figure -> FIGURE ( parametre , parametre . , parametre , parametre )
    (8) figure -> FIGURE ( parametre , parametre . , parametre , parametre , parametrePinceau )

    ,               shift and go to state 49


state 47

    (10) couleur -> [ parametre , parametre . , parametre ]

    ,               shift and go to state 50


state 48

    (6) pinceau -> PINCEAU ( parametreCouleur , . parametreCouleur , parametre )
    (13) parametreCouleur -> . parametre
    (14) parametreCouleur -> . couleur
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER
    (9) couleur -> . COULEUR
    (10) couleur -> . [ parametre , parametre , parametre ]

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33
    COULEUR         shift and go to state 27
    [               shift and go to state 28

    parametreCouleur               shift and go to state 51
    parametre                      shift and go to state 43
    couleur                        shift and go to state 44

state 49

    (7) figure -> FIGURE ( parametre , parametre , . parametre , parametre )
    (8) figure -> FIGURE ( parametre , parametre , . parametre , parametre , parametrePinceau )
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 52

state 50

    (10) couleur -> [ parametre , parametre , . parametre ]
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 53

state 51

    (6) pinceau -> PINCEAU ( parametreCouleur , parametreCouleur . , parametre )

    ,               shift and go to state 54


state 52

    (7) figure -> FIGURE ( parametre , parametre , parametre . , parametre )
    (8) figure -> FIGURE ( parametre , parametre , parametre . , parametre , parametrePinceau )

    ,               shift and go to state 55


state 53

    (10) couleur -> [ parametre , parametre , parametre . ]

    ]               shift and go to state 56


state 54

    (6) pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , . parametre )
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 57

state 55

    (7) figure -> FIGURE ( parametre , parametre , parametre , . parametre )
    (8) figure -> FIGURE ( parametre , parametre , parametre , . parametre , parametrePinceau )
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33

    parametre                      shift and go to state 58

state 56

    (10) couleur -> [ parametre , parametre , parametre ] .

    ;               reduce using rule 10 (couleur -> [ parametre , parametre , parametre ] .)
    $end            reduce using rule 10 (couleur -> [ parametre , parametre , parametre ] .)
    }               reduce using rule 10 (couleur -> [ parametre , parametre , parametre ] .)
    ,               reduce using rule 10 (couleur -> [ parametre , parametre , parametre ] .)


state 57

    (6) pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre . )

    )               shift and go to state 59


state 58

    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre . )
    (8) figure -> FIGURE ( parametre , parametre , parametre , parametre . , parametrePinceau )

    )               shift and go to state 61
    ,               shift and go to state 60


state 59

    (6) pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre ) .

    ;               reduce using rule 6 (pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre ) .)
    $end            reduce using rule 6 (pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre ) .)
    }               reduce using rule 6 (pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre ) .)
    )               reduce using rule 6 (pinceau -> PINCEAU ( parametreCouleur , parametreCouleur , parametre ) .)


state 60

    (8) figure -> FIGURE ( parametre , parametre , parametre , parametre , . parametrePinceau )
    (15) parametrePinceau -> . parametre
    (16) parametrePinceau -> . pinceau
    (11) parametre -> . NUMBER
    (12) parametre -> . IDENTIFIER
    (6) pinceau -> . PINCEAU ( parametreCouleur , parametreCouleur , parametre )

    NUMBER          shift and go to state 32
    IDENTIFIER      shift and go to state 33
    PINCEAU         shift and go to state 29

    parametre                      shift and go to state 62
    parametrePinceau               shift and go to state 63
    pinceau                        shift and go to state 64

state 61

    (7) figure -> FIGURE ( parametre , parametre , parametre , parametre ) .

    ;               reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)
    $end            reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)
    }               reduce using rule 7 (figure -> FIGURE ( parametre , parametre , parametre , parametre ) .)


state 62

    (15) parametrePinceau -> parametre .

    )               reduce using rule 15 (parametrePinceau -> parametre .)


state 63

    (8) figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau . )

    )               shift and go to state 65


state 64

    (16) parametrePinceau -> pinceau .

    )               reduce using rule 16 (parametrePinceau -> pinceau .)


state 65

    (8) figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau ) .

    ;               reduce using rule 8 (figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau ) .)
    $end            reduce using rule 8 (figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau ) .)
    }               reduce using rule 8 (figure -> FIGURE ( parametre , parametre , parametre , parametre , parametrePinceau ) .)

